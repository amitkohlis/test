public static class ServiceRegistrationExtension
    {
        public static void AddServicesInAssembly(this IServiceCollection services, IConfiguration configuration)
        {
            var appServices = typeof(Startup).Assembly.DefinedTypes
                            .Where(x => typeof(IServiceRegistration)
                            .IsAssignableFrom(x) && !x.IsInterface && !x.IsAbstract)
                            .Select(Activator.CreateInstance)
                            .Cast<IServiceRegistration>().ToList();

            appServices.ForEach(svc => svc.RegisterAppServices(services, configuration));
        }
    }


================================================================================================================================

internal class RegisterCors : IServiceRegistration
    {
        public void RegisterAppServices(IServiceCollection services, IConfiguration config)
        {
            //Configure CORS to allow any origin, header and method. 
            services.AddCors(options =>
            {
                options.AddPolicy("AllowAll",
                builder =>
                {
                    builder.AllowAnyOrigin()
                           .AllowAnyHeader()
                           .AllowAnyMethod();
                });
            });
        }
    }
    
 ====================================================================================================================================
 internal class RegisterContractMappings : IServiceRegistration
 {
        public void RegisterAppServices(IServiceCollection services, IConfiguration config)
        {
            //Register Interface Mappings for Repositories
            services.AddTransient<IPersonManager, PersonManager>();
        }
 }
 ========================================================================================================================================
  internal class RegisterHealthChecks : IServiceRegistration
    {
        public void RegisterAppServices(IServiceCollection services, IConfiguration config)
        {
            //Register HealthChecks and UI
            services.AddHealthChecks()
                    .AddCheck("Google Ping", new PingHealthCheck("www.google.com", 100))
                    .AddCheck("Bing Ping", new PingHealthCheck("www.bing.com", 100));
             
                    //.AddUrlGroup(new Uri(config["ApiResourceBaseUrls:AuthServer"]),
                    //            name: "Auth Server",
                    //            failureStatus: HealthStatus.Degraded)
                    
                    //.AddUrlGroup(new Uri(config["ApiResourceBaseUrls:SampleApi"]),
                    //            name: "External Api",
                    //            failureStatus: HealthStatus.Degraded);

                    //.AddNpgSql(config["ConnectionStrings:PostgreSQLConnectionString"],
                    //            name: "PostgreSQL",
                    //            failureStatus: HealthStatus.Unhealthy)
                    //.AddSqlServer(
                    //            connectionString: config["ConnectionStrings:SQLDBConnectionString"],
                    //            healthQuery: "SELECT 1;",
                    //            name: "SQL",
                    //            failureStatus: HealthStatus.Degraded,
                    //            tags: new string[] { "db", "sql", "sqlserver" }


            //            );

            services.AddHealthChecksUI();
        }
    }
 ============================================================================================================================================
   internal class RegisterModelValidators: IServiceRegistration
    {
        public void RegisterAppServices(IServiceCollection services, IConfiguration configuration)
        {
            //Register DTO Validators
            services.AddTransient<IValidator<CreatePersonRequest>, CreatePersonRequestValidator>();
            services.AddTransient<IValidator<UpdatePersonRequest>, UpdatePersonRequestValidator>();

            //Disable Automatic Model State Validation built-in to ASP.NET Core
            services.Configure<ApiBehaviorOptions>(opt => { opt.SuppressModelStateInvalidFilter = true; });
        }
    }
 ==========================================================================================================================================
 internal class RegisterSwagger: IServiceRegistration
    {
        public void RegisterAppServices(IServiceCollection services, IConfiguration config)
        {
            //Register Swagger
            
        }
    }
 ============================================================================================================================
 using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Serilog;
using Serilog.Sinks.Elasticsearch;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Reflection;
using Serilog.Formatting.Compact;

namespace LogElk
{
    public class Program
    {
        public static void Main(string[] args)
        {
			ConfigureLogging();
			CreateHostBuilder(args).Build().Run();
			
		}
		private static void ConfigureLogging()
		{
			var environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
			var configuration = new ConfigurationBuilder()
				.AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
				.AddJsonFile(
					$"appsettings.{Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT")}.json",
					optional: true)
				.Build();

			Log.Logger = new LoggerConfiguration()
				.Enrich.FromLogContext()
				.Enrich.WithMachineName()
				.WriteTo.Debug()
				.WriteTo.Console()
				.WriteTo.Elasticsearch(ConfigureElasticSink(configuration, environment))
				.WriteTo.File("./log/log.json", rollingInterval: RollingInterval.Hour)
				.Enrich.WithProperty("Environment", environment)
				.ReadFrom.Configuration(configuration)
				.CreateLogger();
		}
		private static ElasticsearchSinkOptions ConfigureElasticSink(IConfigurationRoot configuration, string environment)
		{
			return new ElasticsearchSinkOptions(new Uri(configuration["ElasticConfiguration:Uri"]))
			{
				AutoRegisterTemplate = true,
				IndexFormat = $"{Assembly.GetExecutingAssembly().GetName().Name.ToLower().Replace(".", "-")}-{environment?.ToLower().Replace(".", "-")}-{DateTime.UtcNow:yyyy-MM}"
			};
		}
		//public static IHostBuilder CreateHostBuilder(string[] args) =>
		//          Host.CreateDefaultBuilder(args)
		//              .ConfigureWebHostDefaults(webBuilder =>
		//              {
		//                  webBuilder.UseStartup<Startup>();
		//              });
		public static IHostBuilder CreateHostBuilder(string[] args) =>
		  Host.CreateDefaultBuilder(args)
			  .ConfigureWebHostDefaults(webBuilder =>
			  {
				  webBuilder.UseStartup<Startup>();
			  })
			  .ConfigureAppConfiguration(configuration =>
			  {
				  configuration.AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);
				  configuration.AddJsonFile(
					  $"appsettings.{Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT")}.json",
					  optional: true);
			  })
			  .UseSerilog();
	}
}

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
    
