public static class ServiceRegistrationExtension
    {
        public static void AddServicesInAssembly(this IServiceCollection services, IConfiguration configuration)
        {
            var appServices = typeof(Startup).Assembly.DefinedTypes
                            .Where(x => typeof(IServiceRegistration)
                            .IsAssignableFrom(x) && !x.IsInterface && !x.IsAbstract)
                            .Select(Activator.CreateInstance)
                            .Cast<IServiceRegistration>().ToList();

            appServices.ForEach(svc => svc.RegisterAppServices(services, configuration));
        }
    }


================================================================================================================================

internal class RegisterCors : IServiceRegistration
    {
        public void RegisterAppServices(IServiceCollection services, IConfiguration config)
        {
            //Configure CORS to allow any origin, header and method. 
            services.AddCors(options =>
            {
                options.AddPolicy("AllowAll",
                builder =>
                {
                    builder.AllowAnyOrigin()
                           .AllowAnyHeader()
                           .AllowAnyMethod();
                });
            });
        }
    }
    
 ====================================================================================================================================
 internal class RegisterContractMappings : IServiceRegistration
 {
        public void RegisterAppServices(IServiceCollection services, IConfiguration config)
        {
            //Register Interface Mappings for Repositories
            services.AddTransient<IPersonManager, PersonManager>();
        }
 }
 ========================================================================================================================================
  internal class RegisterHealthChecks : IServiceRegistration
    {
        public void RegisterAppServices(IServiceCollection services, IConfiguration config)
        {
            //Register HealthChecks and UI
            services.AddHealthChecks()
                    .AddCheck("Google Ping", new PingHealthCheck("www.google.com", 100))
                    .AddCheck("Bing Ping", new PingHealthCheck("www.bing.com", 100));
             
                    //.AddUrlGroup(new Uri(config["ApiResourceBaseUrls:AuthServer"]),
                    //            name: "Auth Server",
                    //            failureStatus: HealthStatus.Degraded)
                    
                    //.AddUrlGroup(new Uri(config["ApiResourceBaseUrls:SampleApi"]),
                    //            name: "External Api",
                    //            failureStatus: HealthStatus.Degraded);

                    //.AddNpgSql(config["ConnectionStrings:PostgreSQLConnectionString"],
                    //            name: "PostgreSQL",
                    //            failureStatus: HealthStatus.Unhealthy)
                    //.AddSqlServer(
                    //            connectionString: config["ConnectionStrings:SQLDBConnectionString"],
                    //            healthQuery: "SELECT 1;",
                    //            name: "SQL",
                    //            failureStatus: HealthStatus.Degraded,
                    //            tags: new string[] { "db", "sql", "sqlserver" }


            //            );

            services.AddHealthChecksUI();
        }
    }
 ============================================================================================================================================
   internal class RegisterModelValidators: IServiceRegistration
    {
        public void RegisterAppServices(IServiceCollection services, IConfiguration configuration)
        {
            //Register DTO Validators
            services.AddTransient<IValidator<CreatePersonRequest>, CreatePersonRequestValidator>();
            services.AddTransient<IValidator<UpdatePersonRequest>, UpdatePersonRequestValidator>();

            //Disable Automatic Model State Validation built-in to ASP.NET Core
            services.Configure<ApiBehaviorOptions>(opt => { opt.SuppressModelStateInvalidFilter = true; });
        }
    }
 ==========================================================================================================================================
 internal class RegisterSwagger: IServiceRegistration
    {
        public void RegisterAppServices(IServiceCollection services, IConfiguration config)
        {
            //Register Swagger
            
        }
    }
 ============================================================================================================================
 
 {
  "Serilog": {
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Microsoft": "Information",
        "System": "Warning"
      }
    }
  },
  "ElasticConfiguration": {
    "Uri": "https://4405f2fe9507490d836d454a87296fbf.us-central1.gcp.cloud.es.io:9243"
  },
  "AllowedHosts": "*"
}
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
    
